library(nlrx)
library(arm)
library(tidyverse)
library(modelr)
library(RColorBrewer)
library(cowplot)
library(vegan)
library(RVAideMemoire)
library(matrixStats)
library(readr)
library(adegenet)
library(PopGenReport)
library(pegas)
library(poppr)
library(ggthemes)
nl_object <- nl(nlversion = "6.1.0", nlpath = "C:/Program Files/NetLogo 6.1.0",
modelpath = "D:/Maxime/Documents/POSTDOC INRA SOPHIA/IBM/range-expansion-ibm-pp-2019/range_expansion.nlogo",
jvmmem = 1024)
###designing the experiment
trt_grid=tibble(treatment=c("control","weak Allee effect (a =0.5)","strong Allee effect (a = 20)",
"density-dependent dispersal","reduced connectedness"),
start_allee_thres=c(0,0.5,20,0,0),
slope_disp_mean=c(0,0,0,1,0), ##leads to roughly doubling of disp between 0 and K, realistic
dispersal_stochasticity=c(0,0,0,0,1),
logit_disp0_mean=c(logit(0.2),logit(0.2),logit(0.2),logit(0.2),logit(0.1))
)
##strong allee effect always pushed even if velocity fisher not defined see birzu 2018 PNAS
nreplicates=10
duration=200
nl_object@experiment <- experiment(
expname="test",
outpath="D:/Maxime/Documents/POSTDOC INRA SOPHIA/IBM/range-expansion-ibm-pp-2019/output",
repetition = 1,
tickmetrics = "true",
idsetup = "setup",
idgo="go",
stopcond="not any? turtles",
runtime=duration,
evalticks= c(1,seq(10,duration,10)),
metrics=c("ticks"),
metrics.patches = c("pxcor","N_predispersal","N_postdispersal"),
metrics.turtles = list("turtles"=c("neutral_allele","neutral_allele_shuffled","parentID","birth_patch","xcor")),
constants=list(
"trait_variation"= "\"reshuffled\"",   ###careful with the way string variable/csts must be entered
"K"=450,
"allele_number"=10,  ##maximal number of allele at one loci in the experiment (range 3-10, avg 5.89)
#"start_allee_thres"=5,
"duration"=duration,
"logit_disp0_sd"=0,
#"logit_disp0_mean"=-1.4, ###equivalent to a disp rate of 0.2 at low densities, matches empirical in general and tricho
"slope_disp_sd"=0,
#"slope_disp_mean"=0,
"fecundity"=1.2,
#"dispersal_stochasticity"=1,
dispersal_precision=10 #phi parameter of the beta distri, only used if stochasticity active
),
variables=list( ###needs to be a nested list
"start_allee_thres"=list(values=trt_grid$start_allee_thres), ##20 matches Marjorie's PCI paper
"slope_disp_mean"=list(values=trt_grid$slope_disp_mean),
"dispersal_stochasticity"=list(values=trt_grid$dispersal_stochasticity),
"logit_disp0_mean"=list(values=trt_grid$logit_disp0_mean)
)
)
set.seed(42) ##we set seed here to guarantee the seeds selected below are the same everytime
nl_object@simdesign<-simdesign_distinct(nl=nl_object,nseeds=nreplicates)
test=run_nl_all(nl_object)
setsim(nl_object, "simoutput")<-test
##test2=unnest_simoutput(nl_object) ##some conflicts when extricting patch and turtle variables?
trt_grid$logit_disp0_mean=round(trt_grid$logit_disp0_mean,7)
output_turtles=unnest(test,cols=c(metrics.turtles)) %>%
mutate(logit_disp0_mean=round(logit_disp0_mean,7)) %>%
select(-metrics.patches) %>%
left_join(trt_grid)%>%
mutate(replicateID=paste(K,treatment,`random-seed`))%>%
mutate(Location_full=paste(replicateID,xcor,ticks))%>%
mutate(neutral_allele=str_pad(neutral_allele,3,pad="0"),
neutral_allele_shuffled=str_pad(neutral_allele_shuffled,3,pad="0"))
output_patches=unnest(test,cols=c(metrics.patches)) %>%
mutate(logit_disp0_mean=round(logit_disp0_mean,7)) %>%
select(-metrics.turtles) %>%
left_join(trt_grid)%>%
mutate(replicateID=paste(K,treatment,`random-seed`))%>%
mutate(Location_full=paste(replicateID,pxcor,ticks))
output_turtles_corefront=output_turtles %>%
ungroup() %>%
group_by(ticks,replicateID) %>%
mutate(minfront=min(xcor),maxfront=max(xcor)) %>%
filter(xcor==minfront |xcor==0 |xcor==maxfront) %>%
ungroup()
###isolate the genetics markers ####NB: needs to decide how null alleles are treated, esp individuals with only null alleles
genmat<- df2genind(select(output_turtles_corefront,neutral_allele),####all allelic colunns starts with P
ncode=3,pop=output_turtles_corefront$Location_full)
genmat=genind2genpop(genmat)
genmat_shuffled<- df2genind(select(output_turtles_corefront,neutral_allele_shuffled),####all allelic colunns starts with P
ncode=3,pop=output_turtles_corefront$Location_full)
genmat_shuffled=genind2genpop(genmat_shuffled)
data_genetics <- tibble(Hexp=Hs(genmat),Hexp_shuffled=Hs(genmat_shuffled),Location_full=names(Hs(genmat))) %>%
left_join(output_patches)
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(yintercept=c(
(3/(2*sqrt(2)))*2*sqrt(0.1*log(1.2)),
2*sqrt(0.1*log(1.2)),
(3/(2*sqrt(2)))*2*sqrt(0.05*log(1.2)),
2*sqrt(0.05*log(1.2))
))
trt_grid
trt_grid$velocity_fisher=2*sqrt(log(1.2)*(1 - 1 / 450) * (1 - trt_grid$start_allee_thres / 1)*0.5*invlogit(logit_disp0_mean))
trt_grid$velocity_fisher=2*sqrt(log(1.2)*(1 - 1 / 450) * (1 - trt_grid$start_allee_thres / 1)*0.5*invlogit(trt_grid$logit_disp0_mean))
trt_grid
data_genetics=left_join(data_genetics,trt_grid)
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(yintercept=c(
(3/(2*sqrt(2)))*velocity_fisher,
velocity_fisher
))
output_turtles_corefront=left_join(output_turtles_corefront,trt_grid)
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(yintercept=c(
(3/(2*sqrt(2)))*velocity_fisher,
velocity_fisher
))
output_turtles_corefront
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(yintercept=c(
(3/(2*sqrt(2)))*velocity_fisher,
velocity_fisher
))
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher)
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=c(
(3/(2*sqrt(2)))*velocity_fisher,
velocity_fisher
)
))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=c(
(3/(2*sqrt(2)))*velocity_fisher
)
))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>%
ggplot()+
geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_line(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=(3/(2*sqrt(2)))*velocity_fisher))+
geom_hline(aes(yintercept=velocity_fisher))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>% filter(ticks==100) %>%
ggplot()+
#geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_boxplot(aes(x=ticks,y=abs(minfront)/ticks,group=replicateID))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=(3/(2*sqrt(2)))*velocity_fisher))+
geom_hline(aes(yintercept=velocity_fisher))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>% filter(ticks==10 |ticks==100 |ticks==200) %>%
ggplot()+
#geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_boxplot(aes(x=factor(ticks),y=abs(minfront)/ticks))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=(3/(2*sqrt(2)))*velocity_fisher))+
geom_hline(aes(yintercept=velocity_fisher))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>% filter(ticks==10 |ticks==100 |ticks==200) %>%
ggplot()+
#geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_boxplot(aes(x=factor(ticks),y=abs(minfront)/ticks/velocity_fisher))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=(3/(2*sqrt(2)))*velocity_fisher))+
geom_hline(aes(yintercept=velocity_fisher))
####extract front position info from both front
output_turtles_corefront %>%
ungroup() %>%
select(minfront,maxfront,ticks,replicateID,treatment,K,velocity_fisher) %>%
distinct() %>% filter(ticks==10 |ticks==100 |ticks==200) %>%
ggplot()+
#geom_line(aes(x=ticks,y=maxfront/ticks,group=replicateID))+
geom_boxplot(aes(x=factor(ticks),y=abs(minfront)/ticks/velocity_fisher))+facet_wrap(~treatment+K)+
geom_hline(aes(yintercept=(3/(2*sqrt(2)))*1))+
geom_hline(aes(yintercept=1))
###designing the experiment
trt_grid=tibble(treatment=c("control","weak Allee effect (a =0.5)","strong Allee effect (a = 20)",
"density-dependent dispersal","reduced connectedness"),
start_allee_thres=c(0,0.5,20,0,0),
slope_disp_mean=c(0,0,0,1,0), ##leads to roughly doubling of disp between 0 and K, realistic
dispersal_stochasticity=c(0,0,0,0,1),
logit_disp0_mean=c(logit(0.2),logit(0.2),logit(0.2),logit(0.2),logit(0.1))
) %>%
mutate(K=450,fecundity=1.2) %>%
mutate(velocity_fisher=2*sqrt(
log(fecundity)*(1 - 1 / K) * (1 - trt_grid$start_allee_thres / 1)*  ##fecundity term
0.5*invlogit(trt_grid$logit_disp0_mean+1*trt_grid$slope_disp_mean)) ##dispersal term
)
trt_grid
###designing the experiment
trt_grid=tibble(treatment=c("control","weak Allee effect (a =0.5)","strong Allee effect (a = 20)",
"density-dependent dispersal","reduced connectedness"),
start_allee_thres=c(0,0.5,20,0,0),
slope_disp_mean=c(0,0,0,1,0), ##leads to roughly doubling of disp between 0 and K, realistic
dispersal_stochasticity=c(0,0,0,0,1),
logit_disp0_mean=c(logit(0.2),logit(0.2),logit(0.2),logit(0.2),logit(0.1))
) %>%
mutate(K=450,fecundity=1.2) %>%
mutate(velocity_fisher=2*sqrt(
log(fecundity)*(1 - 1 / K) * (1 - trt_grid$start_allee_thres / 1)*  ##fecundity term
0.5*invlogit(trt_grid$logit_disp0_mean)) ##dispersal term
)
trt_grid
###designing the experiment
trt_grid=tibble(treatment=c("control","weak Allee effect (a =0.5)","strong Allee effect (a = 20)",
"density-dependent dispersal","reduced connectedness"),
start_allee_thres=c(0,0.5,20,0,0),
slope_disp_mean=c(0,0,0,1,0), ##leads to roughly doubling of disp between 0 and K, realistic
dispersal_stochasticity=c(0,0,0,0,1),
logit_disp0_mean=c(logit(0.2),logit(0.2),logit(0.2),logit(0.2),logit(0.1))
) %>%
mutate(K=450,fecundity=1.2) %>%
mutate(velocity_fisher=2*sqrt(
log(fecundity)*(1 - 1 / K) * (1 - trt_grid$start_allee_thres / 1)*  ##fecundity term
0.5*invlogit(trt_grid$logit_disp0_mean+(1/K)*trt_grid$slope_disp_mean)) ##dispersal term
)
trt_grid
